//~~WEBPATH~~/vz-projector/scatterPlotVisualizer3DLabels.js
var Fd=function(){function a(){}a.prototype.createGlyphTexture=function(){var a=document.createElement("canvas");a.width=8192;a.height=80;var c=a.getContext("2d");c.font="bold 60px roboto";c.textBaseline="top";c.fillStyle="white";c.rect(0,0,a.width,a.height);c.fill();c.fillStyle="black";for(var d=c.measureText(" ").width,e=new Float32Array(256),g=new Float32Array(256),h=0,k=0;256>k;k++){var l=" "+String.fromCharCode(k),m=c.measureText(l).width;e[k]=m-d;g[k]=h;c.fillText(l,h-d,0);h+=m}return{texture:Cc(a),
lengths:e,offsets:g}};a.prototype.processLabelVerts=function(a){var b=0;this.labelVertexMap=[];for(var d=0;d<a;d++){for(var e=this.labelStrings[d],g=[],h=0;h<e.length;h++){for(var k=0;6>k;k++)g.push(6*b+k);b++}this.labelVertexMap.push(g)}this.totalVertexCount=6*b};a.prototype.createColorBuffers=function(a){function b(a){var b=new V.Color(a);e.labelVertexMap[a].forEach(function(a){d.pickingColors[3*a]=b.r;d.pickingColors[3*a+1]=b.g;d.pickingColors[3*a+2]=b.b;d.renderColors[3*a]=1;d.renderColors[3*
a+1]=1;d.renderColors[3*a+2]=1})}var d=this;this.pickingColors=new Float32Array(3*this.totalVertexCount);this.renderColors=new Float32Array(3*this.totalVertexCount);for(var e=this,g=0;g<a;g++)b(g)};a.prototype.createLabels=function(){var a=this;if(null!=this.labelStrings&&null!=this.worldSpacePointPositions){var c=this.worldSpacePointPositions.length/3;if(c===this.labelStrings.length){this.glyphTexture=this.createGlyphTexture();this.uniforms={texture:{type:"t"},picking:{type:"bool"}};this.material=
new V.ShaderMaterial({uniforms:this.uniforms,transparent:!0,vertexShader:"\n    attribute vec2 posObj;\n    attribute vec3 color;\n    varying vec2 vUv;\n    varying vec3 vColor;\n\n    void main() {\n      vUv \x3d uv;\n      vColor \x3d color;\n\n      // Rotate label to face camera.\n\n      vec4 vRight \x3d vec4(\n        modelViewMatrix[0][0], modelViewMatrix[1][0], modelViewMatrix[2][0], 0);\n\n      vec4 vUp \x3d vec4(\n        modelViewMatrix[0][1], modelViewMatrix[1][1], modelViewMatrix[2][1], 0);\n\n      vec4 vAt \x3d -vec4(\n        modelViewMatrix[0][2], modelViewMatrix[1][2], modelViewMatrix[2][2], 0);\n\n      mat4 pointToCamera \x3d mat4(vRight, vUp, vAt, vec4(0, 0, 0, 1));\n\n      vec2 scaledPos \x3d posObj * 0.0125 * 2.2;\n\n      vec4 posRotated \x3d pointToCamera * vec4(scaledPos, 0, 1);\n      vec4 mvPosition \x3d modelViewMatrix * (vec4(position, 0) + posRotated);\n      gl_Position \x3d projectionMatrix * mvPosition;\n    }",
fragmentShader:"\n    uniform sampler2D texture;\n    uniform bool picking;\n    varying vec2 vUv;\n    varying vec3 vColor;\n\n    void main() {\n      if (picking) {\n        gl_FragColor \x3d vec4(vColor, 1.0);\n      } else {\n        vec4 fromTexture \x3d texture2D(texture, vUv);\n        gl_FragColor \x3d vec4(vColor, 1.0) * fromTexture;\n      }\n    }"});this.processLabelVerts(c);this.createColorBuffers(c);this.positions=new V.BufferAttribute(new Float32Array(3*this.totalVertexCount),3);var d=
new Float32Array(2*this.totalVertexCount),e=new Float32Array(3*this.totalVertexCount),g=new V.BufferAttribute(new Float32Array(3*this.totalVertexCount),2),d=new V.BufferAttribute(d,2),e=new V.BufferAttribute(e,3);this.geometry=new V.BufferGeometry;this.geometry.addAttribute("posObj",g);this.geometry.addAttribute("position",this.positions);this.geometry.addAttribute("uv",d);this.geometry.addAttribute("color",e);for(var h=0,e=0;e<c;e++){for(var k=this.labelStrings[e],l=0,m=0;m<k.length;m++){var p=k.charCodeAt(m);
l+=this.glyphTexture.lengths[p]}l/=-2;for(m=0;m<k.length;m++){p=k.charCodeAt(m);var r=this.glyphTexture.lengths[p],n=(l+r)/80,t=l/80;g.setXY(6*h+0,t,0);g.setXY(6*h+1,n,0);g.setXY(6*h+2,t,1);g.setXY(6*h+3,t,1);g.setXY(6*h+4,n,0);g.setXY(6*h+5,n,1);n=this.glyphTexture.offsets[p];p=this.glyphTexture.offsets[p]+r;n/=8192;p/=8192;d.setXY(6*h+0,n,1);d.setXY(6*h+1,p,1);d.setXY(6*h+2,n,0);d.setXY(6*h+3,n,0);d.setXY(6*h+4,p,1);d.setXY(6*h+5,p,0);h++;l+=r}}for(var g=function(b){var c=Ac(q.worldSpacePointPositions,
b);q.labelVertexMap[b].forEach(function(b){a.positions.setXYZ(b,c.x,c.y,c.z)})},q=this,e=0;e<c;e++)g(e);this.labelsMesh=new V.Mesh(this.geometry,this.material);this.labelsMesh.frustumCulled=!1;this.scene.add(this.labelsMesh)}}};a.prototype.colorLabels=function(a){if(null!=this.labelStrings&&null!=this.geometry&&null!=a){var b=this.geometry.getAttribute("color");b.array=this.renderColors;for(var d=a.length/3,e=0,g=0;g<d;++g){for(var h=new V.Color(a[e],a[e+1],a[e+2]),k=this.labelVertexMap[g].length,
l=0;l<k;++l)b.setXYZ(this.labelVertexMap[g][l],h.r,h.g,h.b);e+=3}b.needsUpdate=!0}};a.prototype.setScene=function(a){this.scene=a};a.prototype.dispose=function(){this.labelsMesh&&(this.scene&&this.scene.remove(this.labelsMesh),this.labelsMesh=null);this.geometry&&(this.geometry.dispose(),this.geometry=null);null!=this.glyphTexture&&null!=this.glyphTexture.texture&&(this.glyphTexture.texture.dispose(),this.glyphTexture.texture=null)};a.prototype.onPickingRender=function(){null==this.geometry&&this.createLabels();
if(null!=this.geometry){this.material.uniforms.texture.value=this.glyphTexture.texture;this.material.uniforms.picking.value=!0;var a=this.geometry.getAttribute("color");a.array=this.pickingColors;a.needsUpdate=!0}};a.prototype.onRender=function(a){null==this.geometry&&this.createLabels();null!=this.geometry&&(this.colorLabels(a.pointColors),this.material.uniforms.texture.value=this.glyphTexture.texture,this.material.uniforms.picking.value=!1,a=this.geometry.getAttribute("color"),a.array=this.renderColors,
a.needsUpdate=!0)};a.prototype.onPointPositionsChanged=function(a){this.worldSpacePointPositions=a;this.dispose()};a.prototype.setLabelStrings=function(a){this.labelStrings=a;this.dispose()};a.prototype.onResize=function(){};return a}();
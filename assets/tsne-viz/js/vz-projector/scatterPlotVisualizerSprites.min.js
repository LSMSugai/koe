//~~WEBPATH~~/vz-projector/scatterPlotVisualizerSprites.js
var Id="\n  // Index of the specific vertex (passed in as bufferAttribute), and the\n  // variable that will be used to pass it to the fragment shader.\n  attribute float spriteIndex;\n  attribute vec3 color;\n  attribute float scaleFactor;\n\n  varying vec2 xyIndex;\n  varying vec3 vColor;\n\n  uniform bool sizeAttenuation;\n  uniform float pointSize;\n  uniform float spritesPerRow;\n  uniform float spritesPerColumn;\n\n  void main() {\n    // Pass index and color values to fragment shader.\n    vColor \x3d color;\n    xyIndex \x3d vec2(mod(spriteIndex, spritesPerRow),\n              floor(spriteIndex / spritesPerColumn));\n\n    // Transform current vertex by modelViewMatrix (model world position and\n    // camera world position matrix).\n    vec4 cameraSpacePos \x3d modelViewMatrix * vec4(position, 1.0);\n\n    // Project vertex in camera-space to screen coordinates using the camera's\n    // projection matrix.\n    gl_Position \x3d projectionMatrix * cameraSpacePos;\n\n    // Create size attenuation (if we're in 3D mode) by making the size of\n    // each point inversly proportional to its distance to the camera.\n    float outputPointSize \x3d pointSize;\n    if (sizeAttenuation) {\n      outputPointSize \x3d -pointSize / cameraSpacePos.z;\n    }\n\n    gl_PointSize \x3d\n      max(outputPointSize * scaleFactor, "+
(5).toFixed(1)+");\n  }",Jd="\n  varying vec2 xyIndex;\n  varying vec3 vColor;\n\n  uniform sampler2D texture;\n  uniform float spritesPerRow;\n  uniform float spritesPerColumn;\n  uniform bool isImage;\n\n  "+V.ShaderChunk.common+"\n  "+V.ShaderChunk.fog_pars_fragment+"\n  \n  bool point_in_unit_circle(vec2 spriteCoord) {\n    vec2 centerToP \x3d spriteCoord - vec2(0.5, 0.5);\n    return dot(centerToP, centerToP) \x3c (0.5 * 0.5);\n  }\n\n  bool point_in_unit_equilateral_triangle(vec2 spriteCoord) {\n    vec3 v0 \x3d vec3(0, 1, 0);\n    vec3 v1 \x3d vec3(0.5, 0, 0);\n    vec3 v2 \x3d vec3(1, 1, 0);\n    vec3 p \x3d vec3(spriteCoord, 0);\n    float p_in_v0_v1 \x3d cross(v1 - v0, p - v0).z;\n    float p_in_v1_v2 \x3d cross(v2 - v1, p - v1).z;\n    return (p_in_v0_v1 \x3e 0.0) \x26\x26 (p_in_v1_v2 \x3e 0.0);\n  }\n\n  bool point_in_unit_square(vec2 spriteCoord) {\n    return true;\n  }\n\n\n  void main() {\n    if (isImage) {\n      // Coordinates of the vertex within the entire sprite image.\n      vec2 coords \x3d\n        (gl_PointCoord + xyIndex) / vec2(spritesPerRow, spritesPerColumn);\n      gl_FragColor \x3d vec4(vColor, 1.0) * texture2D(texture, coords);\n    } else {\n      bool inside \x3d point_in_unit_circle(gl_PointCoord);\n      if (!inside) {\n        discard;\n      }\n      gl_FragColor \x3d vec4(vColor, 1);\n    }\n    "+
V.ShaderChunk.fog_fragment+"\n  }",Kd=function(){function a(){this.texture=null;this.standinTextureForPoints=Cc(document.createElement("canvas"));this.renderMaterial=this.createRenderMaterial(!1);this.pickingMaterial=this.createPickingMaterial()}a.prototype.createTextureFromSpriteAtlas=function(a,c,d){this.texture=Cc(a);this.spritesPerRow=a.width/c[0];this.spritesPerColumn=a.height/c[1];this.spriteDimensions=c;this.spriteIndexBufferAttribute=new V.BufferAttribute(d,1);null!=this.points&&this.points.geometry.addAttribute("spriteIndex",
this.spriteIndexBufferAttribute)};a.prototype.createUniforms=function(){return{texture:{type:"t"},spritesPerRow:{type:"f"},spritesPerColumn:{type:"f"},fogColor:{type:"c"},fogNear:{type:"f"},fogFar:{type:"f"},isImage:{type:"bool"},sizeAttenuation:{type:"bool"},pointSize:{type:"f"}}};a.prototype.createRenderMaterial=function(a){return new V.ShaderMaterial({uniforms:this.createUniforms(),vertexShader:Id,fragmentShader:Jd,transparent:!a,depthTest:a,depthWrite:a,fog:!0,blending:V.MultiplyBlending})};a.prototype.createPickingMaterial=
function(){return new V.ShaderMaterial({uniforms:this.createUniforms(),vertexShader:Id,fragmentShader:"\n  varying vec2 xyIndex;\n  varying vec3 vColor;\n  uniform bool isImage;\n\n  \n  bool point_in_unit_circle(vec2 spriteCoord) {\n    vec2 centerToP \x3d spriteCoord - vec2(0.5, 0.5);\n    return dot(centerToP, centerToP) \x3c (0.5 * 0.5);\n  }\n\n  bool point_in_unit_equilateral_triangle(vec2 spriteCoord) {\n    vec3 v0 \x3d vec3(0, 1, 0);\n    vec3 v1 \x3d vec3(0.5, 0, 0);\n    vec3 v2 \x3d vec3(1, 1, 0);\n    vec3 p \x3d vec3(spriteCoord, 0);\n    float p_in_v0_v1 \x3d cross(v1 - v0, p - v0).z;\n    float p_in_v1_v2 \x3d cross(v2 - v1, p - v1).z;\n    return (p_in_v0_v1 \x3e 0.0) \x26\x26 (p_in_v1_v2 \x3e 0.0);\n  }\n\n  bool point_in_unit_square(vec2 spriteCoord) {\n    return true;\n  }\n\n\n  void main() {\n    xyIndex; // Silence 'unused variable' warning.\n    if (isImage) {\n      gl_FragColor \x3d vec4(vColor, 1);\n    } else {\n      bool inside \x3d point_in_unit_circle(gl_PointCoord);\n      if (!inside) {\n        discard;\n      }\n      gl_FragColor \x3d vec4(vColor, 1);\n    }\n  }",
transparent:!0,depthTest:!0,depthWrite:!0,fog:!1,blending:V.NormalBlending})};a.prototype.createPointSprites=function(a,c){c=this.createGeometry(null!=c?c.length/3:0);this.fog=new V.Fog(16777215);this.points=new V.Points(c,this.renderMaterial);this.points.frustumCulled=!1;null!=this.spriteIndexBufferAttribute&&this.points.geometry.addAttribute("spriteIndex",this.spriteIndexBufferAttribute);a.add(this.points)};a.prototype.calculatePointSize=function(a){if(null!=this.texture)return a?30:this.spriteDimensions[0];
var b=200/Math.log(null!=this.worldSpacePointPositions?this.worldSpacePointPositions.length/3:1)/Math.log(8);return a?b:b/1.5};a.prototype.createGeometry=function(a){this.pickingColors=new Float32Array(3*a);for(var b=0,d=0;d<a;d++){var e=new V.Color(d);this.pickingColors[b++]=e.r;this.pickingColors[b++]=e.g;this.pickingColors[b++]=e.b}a=new V.BufferGeometry;a.addAttribute("position",new V.BufferAttribute(null,3));a.addAttribute("color",new V.BufferAttribute(null,3));a.addAttribute("scaleFactor",new V.BufferAttribute(null,
1));return a};a.prototype.setFogDistances=function(a,c,d){a?(a=this.worldSpacePointPositions.length/3,this.fog.near=c,this.fog.far=d*(2-Math.min(a,5E3)/5E3)):(this.fog.near=Infinity,this.fog.far=Infinity)};a.prototype.dispose=function(){this.disposeGeometry();this.disposeTextureAtlas()};a.prototype.disposeGeometry=function(){null!=this.points&&(this.scene.remove(this.points),this.points.geometry.dispose(),this.worldSpacePointPositions=this.points=null)};a.prototype.disposeTextureAtlas=function(){null!=
this.texture&&this.texture.dispose();this.pickingMaterial=this.renderMaterial=this.texture=null};a.prototype.setScene=function(a){this.scene=a};a.prototype.setSpriteAtlas=function(a,c,d){this.disposeTextureAtlas();this.createTextureFromSpriteAtlas(a,c,d);this.renderMaterial=this.createRenderMaterial(!0);this.pickingMaterial=this.createPickingMaterial()};a.prototype.clearSpriteAtlas=function(){this.disposeTextureAtlas();this.renderMaterial=this.createRenderMaterial(!1);this.pickingMaterial=this.createPickingMaterial()};
a.prototype.onPointPositionsChanged=function(a){if(null==a||0===a.length)this.dispose();else{null!=this.points&&this.worldSpacePointPositions.length!==a.length&&this.disposeGeometry();this.worldSpacePointPositions=a;null==this.points&&this.createPointSprites(this.scene,a);var b=this.points.geometry.getAttribute("position");b.array=a;b.needsUpdate=!0}};a.prototype.onPickingRender=function(a){if(null!=this.points){var b=a.cameraType===vc.Perspective;this.pickingMaterial.uniforms.spritesPerRow.value=
this.spritesPerRow;this.pickingMaterial.uniforms.spritesPerRow.value=this.spritesPerColumn;this.pickingMaterial.uniforms.sizeAttenuation.value=b;this.pickingMaterial.uniforms.pointSize.value=this.calculatePointSize(b);this.points.material=this.pickingMaterial;b=this.points.geometry.getAttribute("color");b.array=this.pickingColors;b.needsUpdate=!0;b=this.points.geometry.getAttribute("scaleFactor");b.array=a.pointScaleFactors;b.needsUpdate=!0}};a.prototype.onRender=function(a){if(this.points){var b=
a.camera instanceof V.PerspectiveCamera;this.setFogDistances(b,a.nearestCameraSpacePointZ,a.farthestCameraSpacePointZ);this.scene.fog=this.fog;this.scene.fog.color=new V.Color(a.backgroundColor);this.renderMaterial.uniforms.fogColor.value=this.scene.fog.color;this.renderMaterial.uniforms.fogNear.value=this.fog.near;this.renderMaterial.uniforms.fogFar.value=this.fog.far;this.renderMaterial.uniforms.spritesPerRow.value=this.spritesPerRow;this.renderMaterial.uniforms.spritesPerColumn.value=this.spritesPerColumn;
this.renderMaterial.uniforms.isImage.value=null!=this.texture;this.renderMaterial.uniforms.texture.value=null!=this.texture?this.texture:this.standinTextureForPoints;this.renderMaterial.uniforms.sizeAttenuation.value=b;this.renderMaterial.uniforms.pointSize.value=this.calculatePointSize(b);this.points.material=this.renderMaterial;b=this.points.geometry.getAttribute("color");this.renderColors=a.pointColors;b.array=this.renderColors;b.needsUpdate=!0;b=this.points.geometry.getAttribute("scaleFactor");
b.array=a.pointScaleFactors;b.needsUpdate=!0}};a.prototype.onResize=function(){};return a}();